{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddvzFtOGxRy6",
        "outputId": "f21b3407-7ead-4b09-bb1a-41b79f591ae3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n",
            "[1, 2, 3, 4, 7, 8, 9, 10, 11]\n"
          ]
        }
      ],
      "source": [
        "def merge_two_arrays(arr1, arr2):\n",
        "  merged=[]\n",
        "  i=j=0\n",
        "  while i<len(arr1) and j<len(arr2):\n",
        "    if arr1[i]<arr2[j]:\n",
        "      merged.append(arr1[i])\n",
        "      i=i+1\n",
        "    else:\n",
        "      merged.append(arr2[j])\n",
        "      j=j+1\n",
        "\n",
        "  while i<len(arr1):\n",
        "    merged.append(arr1[i])\n",
        "    i=i+1\n",
        "  while j<len(arr2):\n",
        "    merged.append(arr2[j])\n",
        "    j=j+1\n",
        "\n",
        "  return merged\n",
        "\n",
        "def merge_sorted_arrays(arrays):\n",
        "  if not arrays:\n",
        "    return []\n",
        "\n",
        "  merged_array = arrays[0]\n",
        "  for i in range(1, len(arrays)):\n",
        "    merged_array = merge_two_arrays(merged_array, arrays[i])\n",
        "  return merged_array\n",
        "\n",
        "arrays1=[[1, 3, 5, 7], [2, 4, 6, 8], [0, 9, 10, 11]]\n",
        "arrays2=[[1, 3, 7], [2, 4, 8], [9, 10, 11]]\n",
        "\n",
        "print(merge_sorted_arrays(arrays1))\n",
        "print(merge_sorted_arrays(arrays2))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def fib(n):\n",
        "  if n==0:\n",
        "    return 0\n",
        "  if n==1:\n",
        "    return 1\n",
        "  return fib(n-1)+fib(n-2)\n",
        "fib(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZqyLHhSZacwA",
        "outputId": "1bc32762-1db5-4026-be7d-f9202f362dda"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def duplicates(array):\n",
        "  if not array:\n",
        "    return array\n",
        "  ind=0\n",
        "  for i in range(1,len(array)):\n",
        "    if array[i]!=array[ind]:\n",
        "      ind=ind+1\n",
        "      array[ind]=array[i]\n",
        "  return array[:ind+1]\n",
        "\n",
        "array1 = [2, 2, 2, 2, 2]\n",
        "result1=duplicates(array1)\n",
        "print(result1)\n",
        "\n",
        "array2=[1, 2, 2, 3, 4, 4, 4, 5, 5]\n",
        "result2=duplicates(array2)\n",
        "print(result2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rHkcHCGmc_0I",
        "outputId": "4b12ba5e-f045-468a-d941-026b39486d72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2]\n",
            "[1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    }
  ]
}